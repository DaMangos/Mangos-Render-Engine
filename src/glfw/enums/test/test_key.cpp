#include <glfw/enums/key.hpp>

#define GLFW_INCLUDE_VULKAN
#include <GLFW/glfw3.h>

static_assert(static_cast<int>(glfw::key::Space) == GLFW_KEY_SPACE);
static_assert(static_cast<int>(glfw::key::Apostrophe) == GLFW_KEY_APOSTROPHE);
static_assert(static_cast<int>(glfw::key::Comma) == GLFW_KEY_COMMA);
static_assert(static_cast<int>(glfw::key::Minus) == GLFW_KEY_MINUS);
static_assert(static_cast<int>(glfw::key::Period) == GLFW_KEY_PERIOD);
static_assert(static_cast<int>(glfw::key::Slash) == GLFW_KEY_SLASH);
static_assert(static_cast<int>(glfw::key::Number_0) == GLFW_KEY_0);
static_assert(static_cast<int>(glfw::key::Number_1) == GLFW_KEY_1);
static_assert(static_cast<int>(glfw::key::Number_2) == GLFW_KEY_2);
static_assert(static_cast<int>(glfw::key::Number_3) == GLFW_KEY_3);
static_assert(static_cast<int>(glfw::key::Number_4) == GLFW_KEY_4);
static_assert(static_cast<int>(glfw::key::Number_5) == GLFW_KEY_5);
static_assert(static_cast<int>(glfw::key::Number_6) == GLFW_KEY_6);
static_assert(static_cast<int>(glfw::key::Number_7) == GLFW_KEY_7);
static_assert(static_cast<int>(glfw::key::Number_8) == GLFW_KEY_8);
static_assert(static_cast<int>(glfw::key::Number_9) == GLFW_KEY_9);
static_assert(static_cast<int>(glfw::key::Semicolon) == GLFW_KEY_SEMICOLON);
static_assert(static_cast<int>(glfw::key::Equal) == GLFW_KEY_EQUAL);
static_assert(static_cast<int>(glfw::key::A) == GLFW_KEY_A);
static_assert(static_cast<int>(glfw::key::B) == GLFW_KEY_B);
static_assert(static_cast<int>(glfw::key::C) == GLFW_KEY_C);
static_assert(static_cast<int>(glfw::key::D) == GLFW_KEY_D);
static_assert(static_cast<int>(glfw::key::E) == GLFW_KEY_E);
static_assert(static_cast<int>(glfw::key::F) == GLFW_KEY_F);
static_assert(static_cast<int>(glfw::key::G) == GLFW_KEY_G);
static_assert(static_cast<int>(glfw::key::H) == GLFW_KEY_H);
static_assert(static_cast<int>(glfw::key::I) == GLFW_KEY_I);
static_assert(static_cast<int>(glfw::key::J) == GLFW_KEY_J);
static_assert(static_cast<int>(glfw::key::K) == GLFW_KEY_K);
static_assert(static_cast<int>(glfw::key::L) == GLFW_KEY_L);
static_assert(static_cast<int>(glfw::key::M) == GLFW_KEY_M);
static_assert(static_cast<int>(glfw::key::N) == GLFW_KEY_N);
static_assert(static_cast<int>(glfw::key::O) == GLFW_KEY_O);
static_assert(static_cast<int>(glfw::key::P) == GLFW_KEY_P);
static_assert(static_cast<int>(glfw::key::Q) == GLFW_KEY_Q);
static_assert(static_cast<int>(glfw::key::R) == GLFW_KEY_R);
static_assert(static_cast<int>(glfw::key::S) == GLFW_KEY_S);
static_assert(static_cast<int>(glfw::key::T) == GLFW_KEY_T);
static_assert(static_cast<int>(glfw::key::U) == GLFW_KEY_U);
static_assert(static_cast<int>(glfw::key::V) == GLFW_KEY_V);
static_assert(static_cast<int>(glfw::key::W) == GLFW_KEY_W);
static_assert(static_cast<int>(glfw::key::X) == GLFW_KEY_X);
static_assert(static_cast<int>(glfw::key::Y) == GLFW_KEY_Y);
static_assert(static_cast<int>(glfw::key::Z) == GLFW_KEY_Z);
static_assert(static_cast<int>(glfw::key::Left_Bracket) == GLFW_KEY_LEFT_BRACKET);
static_assert(static_cast<int>(glfw::key::Backslash) == GLFW_KEY_BACKSLASH);
static_assert(static_cast<int>(glfw::key::Right_Bracket) == GLFW_KEY_RIGHT_BRACKET);
static_assert(static_cast<int>(glfw::key::Grave_Accent) == GLFW_KEY_GRAVE_ACCENT);
static_assert(static_cast<int>(glfw::key::World_1) == GLFW_KEY_WORLD_1);
static_assert(static_cast<int>(glfw::key::World_2) == GLFW_KEY_WORLD_2);
static_assert(static_cast<int>(glfw::key::Escape) == GLFW_KEY_ESCAPE);
static_assert(static_cast<int>(glfw::key::Enter) == GLFW_KEY_ENTER);
static_assert(static_cast<int>(glfw::key::Tab) == GLFW_KEY_TAB);
static_assert(static_cast<int>(glfw::key::Backspace) == GLFW_KEY_BACKSPACE);
static_assert(static_cast<int>(glfw::key::Insert) == GLFW_KEY_INSERT);
static_assert(static_cast<int>(glfw::key::Delete) == GLFW_KEY_DELETE);
static_assert(static_cast<int>(glfw::key::Right) == GLFW_KEY_RIGHT);
static_assert(static_cast<int>(glfw::key::Left) == GLFW_KEY_LEFT);
static_assert(static_cast<int>(glfw::key::Down) == GLFW_KEY_DOWN);
static_assert(static_cast<int>(glfw::key::Up) == GLFW_KEY_UP);
static_assert(static_cast<int>(glfw::key::Page_Up) == GLFW_KEY_PAGE_UP);
static_assert(static_cast<int>(glfw::key::Page_Down) == GLFW_KEY_PAGE_DOWN);
static_assert(static_cast<int>(glfw::key::Home) == GLFW_KEY_HOME);
static_assert(static_cast<int>(glfw::key::End) == GLFW_KEY_END);
static_assert(static_cast<int>(glfw::key::Caps_Lock) == GLFW_KEY_CAPS_LOCK);
static_assert(static_cast<int>(glfw::key::Scroll_Lock) == GLFW_KEY_SCROLL_LOCK);
static_assert(static_cast<int>(glfw::key::Num_Lock) == GLFW_KEY_NUM_LOCK);
static_assert(static_cast<int>(glfw::key::Print_Screen) == GLFW_KEY_PRINT_SCREEN);
static_assert(static_cast<int>(glfw::key::Pause) == GLFW_KEY_PAUSE);
static_assert(static_cast<int>(glfw::key::F1) == GLFW_KEY_F1);
static_assert(static_cast<int>(glfw::key::F2) == GLFW_KEY_F2);
static_assert(static_cast<int>(glfw::key::F3) == GLFW_KEY_F3);
static_assert(static_cast<int>(glfw::key::F4) == GLFW_KEY_F4);
static_assert(static_cast<int>(glfw::key::F5) == GLFW_KEY_F5);
static_assert(static_cast<int>(glfw::key::F6) == GLFW_KEY_F6);
static_assert(static_cast<int>(glfw::key::F7) == GLFW_KEY_F7);
static_assert(static_cast<int>(glfw::key::F8) == GLFW_KEY_F8);
static_assert(static_cast<int>(glfw::key::F9) == GLFW_KEY_F9);
static_assert(static_cast<int>(glfw::key::F10) == GLFW_KEY_F10);
static_assert(static_cast<int>(glfw::key::F11) == GLFW_KEY_F11);
static_assert(static_cast<int>(glfw::key::F12) == GLFW_KEY_F12);
static_assert(static_cast<int>(glfw::key::Key_Pad_0) == GLFW_KEY_KP_0);
static_assert(static_cast<int>(glfw::key::Key_Pad_1) == GLFW_KEY_KP_1);
static_assert(static_cast<int>(glfw::key::Key_Pad_2) == GLFW_KEY_KP_2);
static_assert(static_cast<int>(glfw::key::Key_Pad_3) == GLFW_KEY_KP_3);
static_assert(static_cast<int>(glfw::key::Key_Pad_4) == GLFW_KEY_KP_4);
static_assert(static_cast<int>(glfw::key::Key_Pad_5) == GLFW_KEY_KP_5);
static_assert(static_cast<int>(glfw::key::Key_Pad_6) == GLFW_KEY_KP_6);
static_assert(static_cast<int>(glfw::key::Key_Pad_7) == GLFW_KEY_KP_7);
static_assert(static_cast<int>(glfw::key::Key_Pad_8) == GLFW_KEY_KP_8);
static_assert(static_cast<int>(glfw::key::Key_Pad_9) == GLFW_KEY_KP_9);
static_assert(static_cast<int>(glfw::key::Key_Pad_Decimal) == GLFW_KEY_KP_DECIMAL);
static_assert(static_cast<int>(glfw::key::Key_Pad_Divide) == GLFW_KEY_KP_DIVIDE);
static_assert(static_cast<int>(glfw::key::Key_Pad_Multiply) == GLFW_KEY_KP_MULTIPLY);
static_assert(static_cast<int>(glfw::key::Key_Pad_Subtract) == GLFW_KEY_KP_SUBTRACT);
static_assert(static_cast<int>(glfw::key::Key_Pad_Add) == GLFW_KEY_KP_ADD);
static_assert(static_cast<int>(glfw::key::Key_Pad_Enter) == GLFW_KEY_KP_ENTER);
static_assert(static_cast<int>(glfw::key::Key_Pad_Equal) == GLFW_KEY_KP_EQUAL);
static_assert(static_cast<int>(glfw::key::Left_Shift) == GLFW_KEY_LEFT_SHIFT);
static_assert(static_cast<int>(glfw::key::Left_Control) == GLFW_KEY_LEFT_CONTROL);
static_assert(static_cast<int>(glfw::key::Left_Alt) == GLFW_KEY_LEFT_ALT);
static_assert(static_cast<int>(glfw::key::Left_Super) == GLFW_KEY_LEFT_SUPER);
static_assert(static_cast<int>(glfw::key::Right_Shift) == GLFW_KEY_RIGHT_SHIFT);
static_assert(static_cast<int>(glfw::key::Right_Control) == GLFW_KEY_RIGHT_CONTROL);
static_assert(static_cast<int>(glfw::key::Right_Alt) == GLFW_KEY_RIGHT_ALT);
static_assert(static_cast<int>(glfw::key::Right_Super) == GLFW_KEY_RIGHT_SUPER);
static_assert(static_cast<int>(glfw::key::Menu) == GLFW_KEY_MENU);
