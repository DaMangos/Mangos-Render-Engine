#include <glfw/enums/functional_key.hpp>

#define GLFW_INCLUDE_VULKAN
#include <GLFW/glfw3.h>

static_assert(static_cast<int>(glfw::functional_key::Escape) == GLFW_KEY_ESCAPE);
static_assert(static_cast<int>(glfw::functional_key::Enter) == GLFW_KEY_ENTER);
static_assert(static_cast<int>(glfw::functional_key::Tab) == GLFW_KEY_TAB);
static_assert(static_cast<int>(glfw::functional_key::Backspace) == GLFW_KEY_BACKSPACE);
static_assert(static_cast<int>(glfw::functional_key::Insert) == GLFW_KEY_INSERT);
static_assert(static_cast<int>(glfw::functional_key::Delete) == GLFW_KEY_DELETE);
static_assert(static_cast<int>(glfw::functional_key::Right) == GLFW_KEY_RIGHT);
static_assert(static_cast<int>(glfw::functional_key::Left) == GLFW_KEY_LEFT);
static_assert(static_cast<int>(glfw::functional_key::Down) == GLFW_KEY_DOWN);
static_assert(static_cast<int>(glfw::functional_key::Up) == GLFW_KEY_UP);
static_assert(static_cast<int>(glfw::functional_key::Page_Up) == GLFW_KEY_PAGE_UP);
static_assert(static_cast<int>(glfw::functional_key::Page_Down) == GLFW_KEY_PAGE_DOWN);
static_assert(static_cast<int>(glfw::functional_key::Home) == GLFW_KEY_HOME);
static_assert(static_cast<int>(glfw::functional_key::End) == GLFW_KEY_END);
static_assert(static_cast<int>(glfw::functional_key::Caps_Lock) == GLFW_KEY_CAPS_LOCK);
static_assert(static_cast<int>(glfw::functional_key::Scroll_Lock) == GLFW_KEY_SCROLL_LOCK);
static_assert(static_cast<int>(glfw::functional_key::Num_Lock) == GLFW_KEY_NUM_LOCK);
static_assert(static_cast<int>(glfw::functional_key::Print_Screen) == GLFW_KEY_PRINT_SCREEN);
static_assert(static_cast<int>(glfw::functional_key::Pause) == GLFW_KEY_PAUSE);
static_assert(static_cast<int>(glfw::functional_key::F1) == GLFW_KEY_F1);
static_assert(static_cast<int>(glfw::functional_key::F2) == GLFW_KEY_F2);
static_assert(static_cast<int>(glfw::functional_key::F3) == GLFW_KEY_F3);
static_assert(static_cast<int>(glfw::functional_key::F4) == GLFW_KEY_F4);
static_assert(static_cast<int>(glfw::functional_key::F5) == GLFW_KEY_F5);
static_assert(static_cast<int>(glfw::functional_key::F6) == GLFW_KEY_F6);
static_assert(static_cast<int>(glfw::functional_key::F7) == GLFW_KEY_F7);
static_assert(static_cast<int>(glfw::functional_key::F8) == GLFW_KEY_F8);
static_assert(static_cast<int>(glfw::functional_key::F9) == GLFW_KEY_F9);
static_assert(static_cast<int>(glfw::functional_key::F10) == GLFW_KEY_F10);
static_assert(static_cast<int>(glfw::functional_key::F11) == GLFW_KEY_F11);
static_assert(static_cast<int>(glfw::functional_key::F12) == GLFW_KEY_F12);
static_assert(static_cast<int>(glfw::functional_key::Key_Pad_0) == GLFW_KEY_KP_0);
static_assert(static_cast<int>(glfw::functional_key::Key_Pad_1) == GLFW_KEY_KP_1);
static_assert(static_cast<int>(glfw::functional_key::Key_Pad_2) == GLFW_KEY_KP_2);
static_assert(static_cast<int>(glfw::functional_key::Key_Pad_3) == GLFW_KEY_KP_3);
static_assert(static_cast<int>(glfw::functional_key::Key_Pad_4) == GLFW_KEY_KP_4);
static_assert(static_cast<int>(glfw::functional_key::Key_Pad_5) == GLFW_KEY_KP_5);
static_assert(static_cast<int>(glfw::functional_key::Key_Pad_6) == GLFW_KEY_KP_6);
static_assert(static_cast<int>(glfw::functional_key::Key_Pad_7) == GLFW_KEY_KP_7);
static_assert(static_cast<int>(glfw::functional_key::Key_Pad_8) == GLFW_KEY_KP_8);
static_assert(static_cast<int>(glfw::functional_key::Key_Pad_9) == GLFW_KEY_KP_9);
static_assert(static_cast<int>(glfw::functional_key::Key_Pad_Decimal) == GLFW_KEY_KP_DECIMAL);
static_assert(static_cast<int>(glfw::functional_key::Key_Pad_Divide) == GLFW_KEY_KP_DIVIDE);
static_assert(static_cast<int>(glfw::functional_key::Key_Pad_Multiply) == GLFW_KEY_KP_MULTIPLY);
static_assert(static_cast<int>(glfw::functional_key::Key_Pad_Subtract) == GLFW_KEY_KP_SUBTRACT);
static_assert(static_cast<int>(glfw::functional_key::Key_Pad_Add) == GLFW_KEY_KP_ADD);
static_assert(static_cast<int>(glfw::functional_key::Key_Pad_Enter) == GLFW_KEY_KP_ENTER);
static_assert(static_cast<int>(glfw::functional_key::Key_Pad_Equal) == GLFW_KEY_KP_EQUAL);
static_assert(static_cast<int>(glfw::functional_key::Left_Shift) == GLFW_KEY_LEFT_SHIFT);
static_assert(static_cast<int>(glfw::functional_key::Left_Control) == GLFW_KEY_LEFT_CONTROL);
static_assert(static_cast<int>(glfw::functional_key::Left_Alt) == GLFW_KEY_LEFT_ALT);
static_assert(static_cast<int>(glfw::functional_key::Left_Super) == GLFW_KEY_LEFT_SUPER);
static_assert(static_cast<int>(glfw::functional_key::Right_Shift) == GLFW_KEY_RIGHT_SHIFT);
static_assert(static_cast<int>(glfw::functional_key::Right_Control) == GLFW_KEY_RIGHT_CONTROL);
static_assert(static_cast<int>(glfw::functional_key::Right_Alt) == GLFW_KEY_RIGHT_ALT);
static_assert(static_cast<int>(glfw::functional_key::Right_Super) == GLFW_KEY_RIGHT_SUPER);
static_assert(static_cast<int>(glfw::functional_key::Menu) == GLFW_KEY_MENU);
