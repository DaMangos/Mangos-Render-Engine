#pragma once

#include <glfw_wrapper/version_3_4/enums/key.hpp>

#include <stdexcept>

#define GLFW_INCLUDE_VULKAN
#include <GLFW/glfw3.h>

namespace glfw
{
inline namespace version_3_4
{
[[nodiscard]]
constexpr key to_key(int const key)
{
  switch(key)
  {
    case(GLFW_KEY_SPACE) :
      return key::Space;
    case(GLFW_KEY_APOSTROPHE) :
      return key::Apostrophe;
    case(GLFW_KEY_COMMA) :
      return key::Comma;
    case(GLFW_KEY_MINUS) :
      return key::Minus;
    case(GLFW_KEY_PERIOD) :
      return key::Period;
    case(GLFW_KEY_SLASH) :
      return key::Slash;
    case(GLFW_KEY_0) :
      return key::Number_0;
    case(GLFW_KEY_1) :
      return key::Number_1;
    case(GLFW_KEY_2) :
      return key::Number_2;
    case(GLFW_KEY_3) :
      return key::Number_3;
    case(GLFW_KEY_4) :
      return key::Number_4;
    case(GLFW_KEY_5) :
      return key::Number_5;
    case(GLFW_KEY_6) :
      return key::Number_6;
    case(GLFW_KEY_7) :
      return key::Number_7;
    case(GLFW_KEY_8) :
      return key::Number_8;
    case(GLFW_KEY_9) :
      return key::Number_9;
    case(GLFW_KEY_SEMICOLON) :
      return key::Semicolon;
    case(GLFW_KEY_EQUAL) :
      return key::Equal;
    case(GLFW_KEY_A) :
      return key::A;
    case(GLFW_KEY_B) :
      return key::B;
    case(GLFW_KEY_C) :
      return key::C;
    case(GLFW_KEY_D) :
      return key::D;
    case(GLFW_KEY_E) :
      return key::E;
    case(GLFW_KEY_F) :
      return key::F;
    case(GLFW_KEY_G) :
      return key::G;
    case(GLFW_KEY_H) :
      return key::H;
    case(GLFW_KEY_I) :
      return key::I;
    case(GLFW_KEY_J) :
      return key::J;
    case(GLFW_KEY_K) :
      return key::K;
    case(GLFW_KEY_L) :
      return key::L;
    case(GLFW_KEY_M) :
      return key::M;
    case(GLFW_KEY_N) :
      return key::N;
    case(GLFW_KEY_O) :
      return key::O;
    case(GLFW_KEY_P) :
      return key::P;
    case(GLFW_KEY_Q) :
      return key::Q;
    case(GLFW_KEY_R) :
      return key::R;
    case(GLFW_KEY_S) :
      return key::S;
    case(GLFW_KEY_T) :
      return key::T;
    case(GLFW_KEY_U) :
      return key::U;
    case(GLFW_KEY_V) :
      return key::V;
    case(GLFW_KEY_W) :
      return key::W;
    case(GLFW_KEY_X) :
      return key::X;
    case(GLFW_KEY_Y) :
      return key::Y;
    case(GLFW_KEY_Z) :
      return key::Z;
    case(GLFW_KEY_LEFT_BRACKET) :
      return key::Left_Bracket;
    case(GLFW_KEY_BACKSLASH) :
      return key::Backslash;
    case(GLFW_KEY_RIGHT_BRACKET) :
      return key::Right_Bracket;
    case(GLFW_KEY_GRAVE_ACCENT) :
      return key::Grave_Accent;
    case(GLFW_KEY_WORLD_1) :
      return key::World_1;
    case(GLFW_KEY_WORLD_2) :
      return key::World_2;
    case(GLFW_KEY_ESCAPE) :
      return key::Escape;
    case(GLFW_KEY_ENTER) :
      return key::Enter;
    case(GLFW_KEY_TAB) :
      return key::Tab;
    case(GLFW_KEY_BACKSPACE) :
      return key::Backspace;
    case(GLFW_KEY_INSERT) :
      return key::Insert;
    case(GLFW_KEY_DELETE) :
      return key::Delete;
    case(GLFW_KEY_RIGHT) :
      return key::Right;
    case(GLFW_KEY_LEFT) :
      return key::Left;
    case(GLFW_KEY_DOWN) :
      return key::Down;
    case(GLFW_KEY_UP) :
      return key::Up;
    case(GLFW_KEY_PAGE_UP) :
      return key::Page_Up;
    case(GLFW_KEY_PAGE_DOWN) :
      return key::Page_Down;
    case(GLFW_KEY_HOME) :
      return key::Home;
    case(GLFW_KEY_END) :
      return key::End;
    case(GLFW_KEY_CAPS_LOCK) :
      return key::Caps_Lock;
    case(GLFW_KEY_SCROLL_LOCK) :
      return key::Scroll_Lock;
    case(GLFW_KEY_NUM_LOCK) :
      return key::Num_Lock;
    case(GLFW_KEY_PRINT_SCREEN) :
      return key::Print_Screen;
    case(GLFW_KEY_PAUSE) :
      return key::Pause;
    case(GLFW_KEY_F1) :
      return key::F1;
    case(GLFW_KEY_F2) :
      return key::F2;
    case(GLFW_KEY_F3) :
      return key::F3;
    case(GLFW_KEY_F4) :
      return key::F4;
    case(GLFW_KEY_F5) :
      return key::F5;
    case(GLFW_KEY_F6) :
      return key::F6;
    case(GLFW_KEY_F7) :
      return key::F7;
    case(GLFW_KEY_F8) :
      return key::F8;
    case(GLFW_KEY_F9) :
      return key::F9;
    case(GLFW_KEY_F10) :
      return key::F10;
    case(GLFW_KEY_F11) :
      return key::F11;
    case(GLFW_KEY_F12) :
      return key::F12;
    case(GLFW_KEY_F13) :
      return key::F13;
    case(GLFW_KEY_F14) :
      return key::F14;
    case(GLFW_KEY_F15) :
      return key::F15;
    case(GLFW_KEY_F16) :
      return key::F16;
    case(GLFW_KEY_F17) :
      return key::F17;
    case(GLFW_KEY_F18) :
      return key::F18;
    case(GLFW_KEY_F19) :
      return key::F19;
    case(GLFW_KEY_F20) :
      return key::F20;
    case(GLFW_KEY_F21) :
      return key::F21;
    case(GLFW_KEY_F22) :
      return key::F22;
    case(GLFW_KEY_F23) :
      return key::F23;
    case(GLFW_KEY_F24) :
      return key::F24;
    case(GLFW_KEY_F25) :
      return key::F25;
    case(GLFW_KEY_KP_0) :
      return key::Key_Pad_0;
    case(GLFW_KEY_KP_1) :
      return key::Key_Pad_1;
    case(GLFW_KEY_KP_2) :
      return key::Key_Pad_2;
    case(GLFW_KEY_KP_3) :
      return key::Key_Pad_3;
    case(GLFW_KEY_KP_4) :
      return key::Key_Pad_4;
    case(GLFW_KEY_KP_5) :
      return key::Key_Pad_5;
    case(GLFW_KEY_KP_6) :
      return key::Key_Pad_6;
    case(GLFW_KEY_KP_7) :
      return key::Key_Pad_7;
    case(GLFW_KEY_KP_8) :
      return key::Key_Pad_8;
    case(GLFW_KEY_KP_9) :
      return key::Key_Pad_9;
    case(GLFW_KEY_KP_DECIMAL) :
      return key::Key_Pad_Decimal;
    case(GLFW_KEY_KP_DIVIDE) :
      return key::Key_Pad_Divide;
    case(GLFW_KEY_KP_MULTIPLY) :
      return key::Key_Pad_Multiply;
    case(GLFW_KEY_KP_SUBTRACT) :
      return key::Key_Pad_Subtract;
    case(GLFW_KEY_KP_ADD) :
      return key::Key_Pad_Add;
    case(GLFW_KEY_KP_ENTER) :
      return key::Key_Pad_Enter;
    case(GLFW_KEY_KP_EQUAL) :
      return key::Key_Pad_Equal;
    case(GLFW_KEY_LEFT_SHIFT) :
      return key::Left_Shift;
    case(GLFW_KEY_LEFT_CONTROL) :
      return key::Left_Control;
    case(GLFW_KEY_LEFT_ALT) :
      return key::Left_Alt;
    case(GLFW_KEY_LEFT_SUPER) :
      return key::Left_Super;
    case(GLFW_KEY_RIGHT_SHIFT) :
      return key::Right_Shift;
    case(GLFW_KEY_RIGHT_CONTROL) :
      return key::Right_Control;
    case(GLFW_KEY_RIGHT_ALT) :
      return key::Right_Alt;
    case(GLFW_KEY_RIGHT_SUPER) :
      return key::Right_Super;
    case(GLFW_KEY_MENU) :
      return key::Menu;
  }
  throw std::invalid_argument("invalid key");
}

[[nodiscard]]
constexpr int to_int(key const key)
{
  switch(key)
  {
    case(key::Space) :
      return GLFW_KEY_SPACE;
    case(key::Apostrophe) :
      return GLFW_KEY_APOSTROPHE;
    case(key::Comma) :
      return GLFW_KEY_COMMA;
    case(key::Minus) :
      return GLFW_KEY_MINUS;
    case(key::Period) :
      return GLFW_KEY_PERIOD;
    case(key::Slash) :
      return GLFW_KEY_SLASH;
    case(key::Number_0) :
      return GLFW_KEY_0;
    case(key::Number_1) :
      return GLFW_KEY_1;
    case(key::Number_2) :
      return GLFW_KEY_2;
    case(key::Number_3) :
      return GLFW_KEY_3;
    case(key::Number_4) :
      return GLFW_KEY_4;
    case(key::Number_5) :
      return GLFW_KEY_5;
    case(key::Number_6) :
      return GLFW_KEY_6;
    case(key::Number_7) :
      return GLFW_KEY_7;
    case(key::Number_8) :
      return GLFW_KEY_8;
    case(key::Number_9) :
      return GLFW_KEY_9;
    case(key::Semicolon) :
      return GLFW_KEY_SEMICOLON;
    case(key::Equal) :
      return GLFW_KEY_EQUAL;
    case(key::A) :
      return GLFW_KEY_A;
    case(key::B) :
      return GLFW_KEY_B;
    case(key::C) :
      return GLFW_KEY_C;
    case(key::D) :
      return GLFW_KEY_D;
    case(key::E) :
      return GLFW_KEY_E;
    case(key::F) :
      return GLFW_KEY_F;
    case(key::G) :
      return GLFW_KEY_G;
    case(key::H) :
      return GLFW_KEY_H;
    case(key::I) :
      return GLFW_KEY_I;
    case(key::J) :
      return GLFW_KEY_J;
    case(key::K) :
      return GLFW_KEY_K;
    case(key::L) :
      return GLFW_KEY_L;
    case(key::M) :
      return GLFW_KEY_M;
    case(key::N) :
      return GLFW_KEY_N;
    case(key::O) :
      return GLFW_KEY_O;
    case(key::P) :
      return GLFW_KEY_P;
    case(key::Q) :
      return GLFW_KEY_Q;
    case(key::R) :
      return GLFW_KEY_R;
    case(key::S) :
      return GLFW_KEY_S;
    case(key::T) :
      return GLFW_KEY_T;
    case(key::U) :
      return GLFW_KEY_U;
    case(key::V) :
      return GLFW_KEY_V;
    case(key::W) :
      return GLFW_KEY_W;
    case(key::X) :
      return GLFW_KEY_X;
    case(key::Y) :
      return GLFW_KEY_Y;
    case(key::Z) :
      return GLFW_KEY_Z;
    case(key::Left_Bracket) :
      return GLFW_KEY_LEFT_BRACKET;
    case(key::Backslash) :
      return GLFW_KEY_BACKSLASH;
    case(key::Right_Bracket) :
      return GLFW_KEY_RIGHT_BRACKET;
    case(key::Grave_Accent) :
      return GLFW_KEY_GRAVE_ACCENT;
    case(key::World_1) :
      return GLFW_KEY_WORLD_1;
    case(key::World_2) :
      return GLFW_KEY_WORLD_2;
    case(key::Escape) :
      return GLFW_KEY_ESCAPE;
    case(key::Enter) :
      return GLFW_KEY_ENTER;
    case(key::Tab) :
      return GLFW_KEY_TAB;
    case(key::Backspace) :
      return GLFW_KEY_BACKSPACE;
    case(key::Insert) :
      return GLFW_KEY_INSERT;
    case(key::Delete) :
      return GLFW_KEY_DELETE;
    case(key::Right) :
      return GLFW_KEY_RIGHT;
    case(key::Left) :
      return GLFW_KEY_LEFT;
    case(key::Down) :
      return GLFW_KEY_DOWN;
    case(key::Up) :
      return GLFW_KEY_UP;
    case(key::Page_Up) :
      return GLFW_KEY_PAGE_UP;
    case(key::Page_Down) :
      return GLFW_KEY_PAGE_DOWN;
    case(key::Home) :
      return GLFW_KEY_HOME;
    case(key::End) :
      return GLFW_KEY_END;
    case(key::Caps_Lock) :
      return GLFW_KEY_CAPS_LOCK;
    case(key::Scroll_Lock) :
      return GLFW_KEY_SCROLL_LOCK;
    case(key::Num_Lock) :
      return GLFW_KEY_NUM_LOCK;
    case(key::Print_Screen) :
      return GLFW_KEY_PRINT_SCREEN;
    case(key::Pause) :
      return GLFW_KEY_PAUSE;
    case(key::F1) :
      return GLFW_KEY_F1;
    case(key::F2) :
      return GLFW_KEY_F2;
    case(key::F3) :
      return GLFW_KEY_F3;
    case(key::F4) :
      return GLFW_KEY_F4;
    case(key::F5) :
      return GLFW_KEY_F5;
    case(key::F6) :
      return GLFW_KEY_F6;
    case(key::F7) :
      return GLFW_KEY_F7;
    case(key::F8) :
      return GLFW_KEY_F8;
    case(key::F9) :
      return GLFW_KEY_F9;
    case(key::F10) :
      return GLFW_KEY_F10;
    case(key::F11) :
      return GLFW_KEY_F11;
    case(key::F12) :
      return GLFW_KEY_F12;
    case(key::F13) :
      return GLFW_KEY_F13;
    case(key::F14) :
      return GLFW_KEY_F14;
    case(key::F15) :
      return GLFW_KEY_F15;
    case(key::F16) :
      return GLFW_KEY_F16;
    case(key::F17) :
      return GLFW_KEY_F17;
    case(key::F18) :
      return GLFW_KEY_F18;
    case(key::F19) :
      return GLFW_KEY_F19;
    case(key::F20) :
      return GLFW_KEY_F20;
    case(key::F21) :
      return GLFW_KEY_F21;
    case(key::F22) :
      return GLFW_KEY_F22;
    case(key::F23) :
      return GLFW_KEY_F23;
    case(key::F24) :
      return GLFW_KEY_F24;
    case(key::F25) :
      return GLFW_KEY_F25;
    case(key::Key_Pad_0) :
      return GLFW_KEY_KP_0;
    case(key::Key_Pad_1) :
      return GLFW_KEY_KP_1;
    case(key::Key_Pad_2) :
      return GLFW_KEY_KP_2;
    case(key::Key_Pad_3) :
      return GLFW_KEY_KP_3;
    case(key::Key_Pad_4) :
      return GLFW_KEY_KP_4;
    case(key::Key_Pad_5) :
      return GLFW_KEY_KP_5;
    case(key::Key_Pad_6) :
      return GLFW_KEY_KP_6;
    case(key::Key_Pad_7) :
      return GLFW_KEY_KP_7;
    case(key::Key_Pad_8) :
      return GLFW_KEY_KP_8;
    case(key::Key_Pad_9) :
      return GLFW_KEY_KP_9;
    case(key::Key_Pad_Decimal) :
      return GLFW_KEY_KP_DECIMAL;
    case(key::Key_Pad_Divide) :
      return GLFW_KEY_KP_DIVIDE;
    case(key::Key_Pad_Multiply) :
      return GLFW_KEY_KP_MULTIPLY;
    case(key::Key_Pad_Subtract) :
      return GLFW_KEY_KP_SUBTRACT;
    case(key::Key_Pad_Add) :
      return GLFW_KEY_KP_ADD;
    case(key::Key_Pad_Enter) :
      return GLFW_KEY_KP_ENTER;
    case(key::Key_Pad_Equal) :
      return GLFW_KEY_KP_EQUAL;
    case(key::Left_Shift) :
      return GLFW_KEY_LEFT_SHIFT;
    case(key::Left_Control) :
      return GLFW_KEY_LEFT_CONTROL;
    case(key::Left_Alt) :
      return GLFW_KEY_LEFT_ALT;
    case(key::Left_Super) :
      return GLFW_KEY_LEFT_SUPER;
    case(key::Right_Shift) :
      return GLFW_KEY_RIGHT_SHIFT;
    case(key::Right_Control) :
      return GLFW_KEY_RIGHT_CONTROL;
    case(key::Right_Alt) :
      return GLFW_KEY_RIGHT_ALT;
    case(key::Right_Super) :
      return GLFW_KEY_RIGHT_SUPER;
    case(key::Menu) :
      return GLFW_KEY_MENU;
  }
  throw std::invalid_argument("invalid key");
}
}
}