#include <gtest/gtest.h>

#include "../to_key.hpp"

TEST(glfw_version_3_4, int_to_key)
{
  ASSERT_THROW(std::ignore = glfw::to_key(-1), std::invalid_argument);
}

TEST(glfw_version_3_4, key_to_int)
{
  ASSERT_THROW(std::ignore = glfw::to_int(static_cast<glfw::key>(-1)), std::invalid_argument);
}

static_assert(glfw::to_key(GLFW_KEY_SPACE) == glfw::key::Space);
static_assert(glfw::to_key(GLFW_KEY_APOSTROPHE) == glfw::key::Apostrophe);
static_assert(glfw::to_key(GLFW_KEY_COMMA) == glfw::key::Comma);
static_assert(glfw::to_key(GLFW_KEY_MINUS) == glfw::key::Minus);
static_assert(glfw::to_key(GLFW_KEY_PERIOD) == glfw::key::Period);
static_assert(glfw::to_key(GLFW_KEY_SLASH) == glfw::key::Slash);
static_assert(glfw::to_key(GLFW_KEY_0) == glfw::key::Number_0);
static_assert(glfw::to_key(GLFW_KEY_1) == glfw::key::Number_1);
static_assert(glfw::to_key(GLFW_KEY_2) == glfw::key::Number_2);
static_assert(glfw::to_key(GLFW_KEY_3) == glfw::key::Number_3);
static_assert(glfw::to_key(GLFW_KEY_4) == glfw::key::Number_4);
static_assert(glfw::to_key(GLFW_KEY_5) == glfw::key::Number_5);
static_assert(glfw::to_key(GLFW_KEY_6) == glfw::key::Number_6);
static_assert(glfw::to_key(GLFW_KEY_7) == glfw::key::Number_7);
static_assert(glfw::to_key(GLFW_KEY_8) == glfw::key::Number_8);
static_assert(glfw::to_key(GLFW_KEY_9) == glfw::key::Number_9);
static_assert(glfw::to_key(GLFW_KEY_SEMICOLON) == glfw::key::Semicolon);
static_assert(glfw::to_key(GLFW_KEY_EQUAL) == glfw::key::Equal);
static_assert(glfw::to_key(GLFW_KEY_A) == glfw::key::A);
static_assert(glfw::to_key(GLFW_KEY_B) == glfw::key::B);
static_assert(glfw::to_key(GLFW_KEY_C) == glfw::key::C);
static_assert(glfw::to_key(GLFW_KEY_D) == glfw::key::D);
static_assert(glfw::to_key(GLFW_KEY_E) == glfw::key::E);
static_assert(glfw::to_key(GLFW_KEY_F) == glfw::key::F);
static_assert(glfw::to_key(GLFW_KEY_G) == glfw::key::G);
static_assert(glfw::to_key(GLFW_KEY_H) == glfw::key::H);
static_assert(glfw::to_key(GLFW_KEY_I) == glfw::key::I);
static_assert(glfw::to_key(GLFW_KEY_J) == glfw::key::J);
static_assert(glfw::to_key(GLFW_KEY_K) == glfw::key::K);
static_assert(glfw::to_key(GLFW_KEY_L) == glfw::key::L);
static_assert(glfw::to_key(GLFW_KEY_M) == glfw::key::M);
static_assert(glfw::to_key(GLFW_KEY_N) == glfw::key::N);
static_assert(glfw::to_key(GLFW_KEY_O) == glfw::key::O);
static_assert(glfw::to_key(GLFW_KEY_P) == glfw::key::P);
static_assert(glfw::to_key(GLFW_KEY_Q) == glfw::key::Q);
static_assert(glfw::to_key(GLFW_KEY_R) == glfw::key::R);
static_assert(glfw::to_key(GLFW_KEY_S) == glfw::key::S);
static_assert(glfw::to_key(GLFW_KEY_T) == glfw::key::T);
static_assert(glfw::to_key(GLFW_KEY_U) == glfw::key::U);
static_assert(glfw::to_key(GLFW_KEY_V) == glfw::key::V);
static_assert(glfw::to_key(GLFW_KEY_W) == glfw::key::W);
static_assert(glfw::to_key(GLFW_KEY_X) == glfw::key::X);
static_assert(glfw::to_key(GLFW_KEY_Y) == glfw::key::Y);
static_assert(glfw::to_key(GLFW_KEY_Z) == glfw::key::Z);
static_assert(glfw::to_key(GLFW_KEY_LEFT_BRACKET) == glfw::key::Left_Bracket);
static_assert(glfw::to_key(GLFW_KEY_BACKSLASH) == glfw::key::Backslash);
static_assert(glfw::to_key(GLFW_KEY_RIGHT_BRACKET) == glfw::key::Right_Bracket);
static_assert(glfw::to_key(GLFW_KEY_GRAVE_ACCENT) == glfw::key::Grave_Accent);
static_assert(glfw::to_key(GLFW_KEY_WORLD_1) == glfw::key::World_1);
static_assert(glfw::to_key(GLFW_KEY_WORLD_2) == glfw::key::World_2);
static_assert(glfw::to_key(GLFW_KEY_ESCAPE) == glfw::key::Escape);
static_assert(glfw::to_key(GLFW_KEY_ENTER) == glfw::key::Enter);
static_assert(glfw::to_key(GLFW_KEY_TAB) == glfw::key::Tab);
static_assert(glfw::to_key(GLFW_KEY_BACKSPACE) == glfw::key::Backspace);
static_assert(glfw::to_key(GLFW_KEY_INSERT) == glfw::key::Insert);
static_assert(glfw::to_key(GLFW_KEY_DELETE) == glfw::key::Delete);
static_assert(glfw::to_key(GLFW_KEY_RIGHT) == glfw::key::Right);
static_assert(glfw::to_key(GLFW_KEY_LEFT) == glfw::key::Left);
static_assert(glfw::to_key(GLFW_KEY_DOWN) == glfw::key::Down);
static_assert(glfw::to_key(GLFW_KEY_UP) == glfw::key::Up);
static_assert(glfw::to_key(GLFW_KEY_PAGE_UP) == glfw::key::Page_Up);
static_assert(glfw::to_key(GLFW_KEY_PAGE_DOWN) == glfw::key::Page_Down);
static_assert(glfw::to_key(GLFW_KEY_HOME) == glfw::key::Home);
static_assert(glfw::to_key(GLFW_KEY_END) == glfw::key::End);
static_assert(glfw::to_key(GLFW_KEY_CAPS_LOCK) == glfw::key::Caps_Lock);
static_assert(glfw::to_key(GLFW_KEY_SCROLL_LOCK) == glfw::key::Scroll_Lock);
static_assert(glfw::to_key(GLFW_KEY_NUM_LOCK) == glfw::key::Num_Lock);
static_assert(glfw::to_key(GLFW_KEY_PRINT_SCREEN) == glfw::key::Print_Screen);
static_assert(glfw::to_key(GLFW_KEY_PAUSE) == glfw::key::Pause);
static_assert(glfw::to_key(GLFW_KEY_F1) == glfw::key::F1);
static_assert(glfw::to_key(GLFW_KEY_F2) == glfw::key::F2);
static_assert(glfw::to_key(GLFW_KEY_F3) == glfw::key::F3);
static_assert(glfw::to_key(GLFW_KEY_F4) == glfw::key::F4);
static_assert(glfw::to_key(GLFW_KEY_F5) == glfw::key::F5);
static_assert(glfw::to_key(GLFW_KEY_F6) == glfw::key::F6);
static_assert(glfw::to_key(GLFW_KEY_F7) == glfw::key::F7);
static_assert(glfw::to_key(GLFW_KEY_F8) == glfw::key::F8);
static_assert(glfw::to_key(GLFW_KEY_F9) == glfw::key::F9);
static_assert(glfw::to_key(GLFW_KEY_F10) == glfw::key::F10);
static_assert(glfw::to_key(GLFW_KEY_F11) == glfw::key::F11);
static_assert(glfw::to_key(GLFW_KEY_F12) == glfw::key::F12);
static_assert(glfw::to_key(GLFW_KEY_KP_0) == glfw::key::Key_Pad_0);
static_assert(glfw::to_key(GLFW_KEY_KP_1) == glfw::key::Key_Pad_1);
static_assert(glfw::to_key(GLFW_KEY_KP_2) == glfw::key::Key_Pad_2);
static_assert(glfw::to_key(GLFW_KEY_KP_3) == glfw::key::Key_Pad_3);
static_assert(glfw::to_key(GLFW_KEY_KP_4) == glfw::key::Key_Pad_4);
static_assert(glfw::to_key(GLFW_KEY_KP_5) == glfw::key::Key_Pad_5);
static_assert(glfw::to_key(GLFW_KEY_KP_6) == glfw::key::Key_Pad_6);
static_assert(glfw::to_key(GLFW_KEY_KP_7) == glfw::key::Key_Pad_7);
static_assert(glfw::to_key(GLFW_KEY_KP_8) == glfw::key::Key_Pad_8);
static_assert(glfw::to_key(GLFW_KEY_KP_9) == glfw::key::Key_Pad_9);
static_assert(glfw::to_key(GLFW_KEY_KP_DECIMAL) == glfw::key::Key_Pad_Decimal);
static_assert(glfw::to_key(GLFW_KEY_KP_DIVIDE) == glfw::key::Key_Pad_Divide);
static_assert(glfw::to_key(GLFW_KEY_KP_MULTIPLY) == glfw::key::Key_Pad_Multiply);
static_assert(glfw::to_key(GLFW_KEY_KP_SUBTRACT) == glfw::key::Key_Pad_Subtract);
static_assert(glfw::to_key(GLFW_KEY_KP_ADD) == glfw::key::Key_Pad_Add);
static_assert(glfw::to_key(GLFW_KEY_KP_ENTER) == glfw::key::Key_Pad_Enter);
static_assert(glfw::to_key(GLFW_KEY_KP_EQUAL) == glfw::key::Key_Pad_Equal);
static_assert(glfw::to_key(GLFW_KEY_LEFT_SHIFT) == glfw::key::Left_Shift);
static_assert(glfw::to_key(GLFW_KEY_LEFT_CONTROL) == glfw::key::Left_Control);
static_assert(glfw::to_key(GLFW_KEY_LEFT_ALT) == glfw::key::Left_Alt);
static_assert(glfw::to_key(GLFW_KEY_LEFT_SUPER) == glfw::key::Left_Super);
static_assert(glfw::to_key(GLFW_KEY_RIGHT_SHIFT) == glfw::key::Right_Shift);
static_assert(glfw::to_key(GLFW_KEY_RIGHT_CONTROL) == glfw::key::Right_Control);
static_assert(glfw::to_key(GLFW_KEY_RIGHT_ALT) == glfw::key::Right_Alt);
static_assert(glfw::to_key(GLFW_KEY_RIGHT_SUPER) == glfw::key::Right_Super);
static_assert(glfw::to_key(GLFW_KEY_MENU) == glfw::key::Menu);

static_assert(glfw::to_int(glfw::key::Space) == GLFW_KEY_SPACE);
static_assert(glfw::to_int(glfw::key::Apostrophe) == GLFW_KEY_APOSTROPHE);
static_assert(glfw::to_int(glfw::key::Comma) == GLFW_KEY_COMMA);
static_assert(glfw::to_int(glfw::key::Minus) == GLFW_KEY_MINUS);
static_assert(glfw::to_int(glfw::key::Period) == GLFW_KEY_PERIOD);
static_assert(glfw::to_int(glfw::key::Slash) == GLFW_KEY_SLASH);
static_assert(glfw::to_int(glfw::key::Number_0) == GLFW_KEY_0);
static_assert(glfw::to_int(glfw::key::Number_1) == GLFW_KEY_1);
static_assert(glfw::to_int(glfw::key::Number_2) == GLFW_KEY_2);
static_assert(glfw::to_int(glfw::key::Number_3) == GLFW_KEY_3);
static_assert(glfw::to_int(glfw::key::Number_4) == GLFW_KEY_4);
static_assert(glfw::to_int(glfw::key::Number_5) == GLFW_KEY_5);
static_assert(glfw::to_int(glfw::key::Number_6) == GLFW_KEY_6);
static_assert(glfw::to_int(glfw::key::Number_7) == GLFW_KEY_7);
static_assert(glfw::to_int(glfw::key::Number_8) == GLFW_KEY_8);
static_assert(glfw::to_int(glfw::key::Number_9) == GLFW_KEY_9);
static_assert(glfw::to_int(glfw::key::Semicolon) == GLFW_KEY_SEMICOLON);
static_assert(glfw::to_int(glfw::key::Equal) == GLFW_KEY_EQUAL);
static_assert(glfw::to_int(glfw::key::A) == GLFW_KEY_A);
static_assert(glfw::to_int(glfw::key::B) == GLFW_KEY_B);
static_assert(glfw::to_int(glfw::key::C) == GLFW_KEY_C);
static_assert(glfw::to_int(glfw::key::D) == GLFW_KEY_D);
static_assert(glfw::to_int(glfw::key::E) == GLFW_KEY_E);
static_assert(glfw::to_int(glfw::key::F) == GLFW_KEY_F);
static_assert(glfw::to_int(glfw::key::G) == GLFW_KEY_G);
static_assert(glfw::to_int(glfw::key::H) == GLFW_KEY_H);
static_assert(glfw::to_int(glfw::key::I) == GLFW_KEY_I);
static_assert(glfw::to_int(glfw::key::J) == GLFW_KEY_J);
static_assert(glfw::to_int(glfw::key::K) == GLFW_KEY_K);
static_assert(glfw::to_int(glfw::key::L) == GLFW_KEY_L);
static_assert(glfw::to_int(glfw::key::M) == GLFW_KEY_M);
static_assert(glfw::to_int(glfw::key::N) == GLFW_KEY_N);
static_assert(glfw::to_int(glfw::key::O) == GLFW_KEY_O);
static_assert(glfw::to_int(glfw::key::P) == GLFW_KEY_P);
static_assert(glfw::to_int(glfw::key::Q) == GLFW_KEY_Q);
static_assert(glfw::to_int(glfw::key::R) == GLFW_KEY_R);
static_assert(glfw::to_int(glfw::key::S) == GLFW_KEY_S);
static_assert(glfw::to_int(glfw::key::T) == GLFW_KEY_T);
static_assert(glfw::to_int(glfw::key::U) == GLFW_KEY_U);
static_assert(glfw::to_int(glfw::key::V) == GLFW_KEY_V);
static_assert(glfw::to_int(glfw::key::W) == GLFW_KEY_W);
static_assert(glfw::to_int(glfw::key::X) == GLFW_KEY_X);
static_assert(glfw::to_int(glfw::key::Y) == GLFW_KEY_Y);
static_assert(glfw::to_int(glfw::key::Z) == GLFW_KEY_Z);
static_assert(glfw::to_int(glfw::key::Left_Bracket) == GLFW_KEY_LEFT_BRACKET);
static_assert(glfw::to_int(glfw::key::Backslash) == GLFW_KEY_BACKSLASH);
static_assert(glfw::to_int(glfw::key::Right_Bracket) == GLFW_KEY_RIGHT_BRACKET);
static_assert(glfw::to_int(glfw::key::Grave_Accent) == GLFW_KEY_GRAVE_ACCENT);
static_assert(glfw::to_int(glfw::key::World_1) == GLFW_KEY_WORLD_1);
static_assert(glfw::to_int(glfw::key::World_2) == GLFW_KEY_WORLD_2);
static_assert(glfw::to_int(glfw::key::Escape) == GLFW_KEY_ESCAPE);
static_assert(glfw::to_int(glfw::key::Enter) == GLFW_KEY_ENTER);
static_assert(glfw::to_int(glfw::key::Tab) == GLFW_KEY_TAB);
static_assert(glfw::to_int(glfw::key::Backspace) == GLFW_KEY_BACKSPACE);
static_assert(glfw::to_int(glfw::key::Insert) == GLFW_KEY_INSERT);
static_assert(glfw::to_int(glfw::key::Delete) == GLFW_KEY_DELETE);
static_assert(glfw::to_int(glfw::key::Right) == GLFW_KEY_RIGHT);
static_assert(glfw::to_int(glfw::key::Left) == GLFW_KEY_LEFT);
static_assert(glfw::to_int(glfw::key::Down) == GLFW_KEY_DOWN);
static_assert(glfw::to_int(glfw::key::Up) == GLFW_KEY_UP);
static_assert(glfw::to_int(glfw::key::Page_Up) == GLFW_KEY_PAGE_UP);
static_assert(glfw::to_int(glfw::key::Page_Down) == GLFW_KEY_PAGE_DOWN);
static_assert(glfw::to_int(glfw::key::Home) == GLFW_KEY_HOME);
static_assert(glfw::to_int(glfw::key::End) == GLFW_KEY_END);
static_assert(glfw::to_int(glfw::key::Caps_Lock) == GLFW_KEY_CAPS_LOCK);
static_assert(glfw::to_int(glfw::key::Scroll_Lock) == GLFW_KEY_SCROLL_LOCK);
static_assert(glfw::to_int(glfw::key::Num_Lock) == GLFW_KEY_NUM_LOCK);
static_assert(glfw::to_int(glfw::key::Print_Screen) == GLFW_KEY_PRINT_SCREEN);
static_assert(glfw::to_int(glfw::key::Pause) == GLFW_KEY_PAUSE);
static_assert(glfw::to_int(glfw::key::F1) == GLFW_KEY_F1);
static_assert(glfw::to_int(glfw::key::F2) == GLFW_KEY_F2);
static_assert(glfw::to_int(glfw::key::F3) == GLFW_KEY_F3);
static_assert(glfw::to_int(glfw::key::F4) == GLFW_KEY_F4);
static_assert(glfw::to_int(glfw::key::F5) == GLFW_KEY_F5);
static_assert(glfw::to_int(glfw::key::F6) == GLFW_KEY_F6);
static_assert(glfw::to_int(glfw::key::F7) == GLFW_KEY_F7);
static_assert(glfw::to_int(glfw::key::F8) == GLFW_KEY_F8);
static_assert(glfw::to_int(glfw::key::F9) == GLFW_KEY_F9);
static_assert(glfw::to_int(glfw::key::F10) == GLFW_KEY_F10);
static_assert(glfw::to_int(glfw::key::F11) == GLFW_KEY_F11);
static_assert(glfw::to_int(glfw::key::F12) == GLFW_KEY_F12);
static_assert(glfw::to_int(glfw::key::Key_Pad_0) == GLFW_KEY_KP_0);
static_assert(glfw::to_int(glfw::key::Key_Pad_1) == GLFW_KEY_KP_1);
static_assert(glfw::to_int(glfw::key::Key_Pad_2) == GLFW_KEY_KP_2);
static_assert(glfw::to_int(glfw::key::Key_Pad_3) == GLFW_KEY_KP_3);
static_assert(glfw::to_int(glfw::key::Key_Pad_4) == GLFW_KEY_KP_4);
static_assert(glfw::to_int(glfw::key::Key_Pad_5) == GLFW_KEY_KP_5);
static_assert(glfw::to_int(glfw::key::Key_Pad_6) == GLFW_KEY_KP_6);
static_assert(glfw::to_int(glfw::key::Key_Pad_7) == GLFW_KEY_KP_7);
static_assert(glfw::to_int(glfw::key::Key_Pad_8) == GLFW_KEY_KP_8);
static_assert(glfw::to_int(glfw::key::Key_Pad_9) == GLFW_KEY_KP_9);
static_assert(glfw::to_int(glfw::key::Key_Pad_Decimal) == GLFW_KEY_KP_DECIMAL);
static_assert(glfw::to_int(glfw::key::Key_Pad_Divide) == GLFW_KEY_KP_DIVIDE);
static_assert(glfw::to_int(glfw::key::Key_Pad_Multiply) == GLFW_KEY_KP_MULTIPLY);
static_assert(glfw::to_int(glfw::key::Key_Pad_Subtract) == GLFW_KEY_KP_SUBTRACT);
static_assert(glfw::to_int(glfw::key::Key_Pad_Add) == GLFW_KEY_KP_ADD);
static_assert(glfw::to_int(glfw::key::Key_Pad_Enter) == GLFW_KEY_KP_ENTER);
static_assert(glfw::to_int(glfw::key::Key_Pad_Equal) == GLFW_KEY_KP_EQUAL);
static_assert(glfw::to_int(glfw::key::Left_Shift) == GLFW_KEY_LEFT_SHIFT);
static_assert(glfw::to_int(glfw::key::Left_Control) == GLFW_KEY_LEFT_CONTROL);
static_assert(glfw::to_int(glfw::key::Left_Alt) == GLFW_KEY_LEFT_ALT);
static_assert(glfw::to_int(glfw::key::Left_Super) == GLFW_KEY_LEFT_SUPER);
static_assert(glfw::to_int(glfw::key::Right_Shift) == GLFW_KEY_RIGHT_SHIFT);
static_assert(glfw::to_int(glfw::key::Right_Control) == GLFW_KEY_RIGHT_CONTROL);
static_assert(glfw::to_int(glfw::key::Right_Alt) == GLFW_KEY_RIGHT_ALT);
static_assert(glfw::to_int(glfw::key::Right_Super) == GLFW_KEY_RIGHT_SUPER);
static_assert(glfw::to_int(glfw::key::Menu) == GLFW_KEY_MENU);

static_assert(static_cast<glfw::printable_key>(glfw::key::Space) == glfw::printable_key::Space);
static_assert(static_cast<glfw::printable_key>(glfw::key::Apostrophe) == glfw::printable_key::Apostrophe);
static_assert(static_cast<glfw::printable_key>(glfw::key::Comma) == glfw::printable_key::Comma);
static_assert(static_cast<glfw::printable_key>(glfw::key::Minus) == glfw::printable_key::Minus);
static_assert(static_cast<glfw::printable_key>(glfw::key::Period) == glfw::printable_key::Period);
static_assert(static_cast<glfw::printable_key>(glfw::key::Slash) == glfw::printable_key::Slash);
static_assert(static_cast<glfw::printable_key>(glfw::key::Number_0) == glfw::printable_key::Number_0);
static_assert(static_cast<glfw::printable_key>(glfw::key::Number_1) == glfw::printable_key::Number_1);
static_assert(static_cast<glfw::printable_key>(glfw::key::Number_2) == glfw::printable_key::Number_2);
static_assert(static_cast<glfw::printable_key>(glfw::key::Number_3) == glfw::printable_key::Number_3);
static_assert(static_cast<glfw::printable_key>(glfw::key::Number_4) == glfw::printable_key::Number_4);
static_assert(static_cast<glfw::printable_key>(glfw::key::Number_5) == glfw::printable_key::Number_5);
static_assert(static_cast<glfw::printable_key>(glfw::key::Number_6) == glfw::printable_key::Number_6);
static_assert(static_cast<glfw::printable_key>(glfw::key::Number_7) == glfw::printable_key::Number_7);
static_assert(static_cast<glfw::printable_key>(glfw::key::Number_8) == glfw::printable_key::Number_8);
static_assert(static_cast<glfw::printable_key>(glfw::key::Number_9) == glfw::printable_key::Number_9);
static_assert(static_cast<glfw::printable_key>(glfw::key::Semicolon) == glfw::printable_key::Semicolon);
static_assert(static_cast<glfw::printable_key>(glfw::key::Equal) == glfw::printable_key::Equal);
static_assert(static_cast<glfw::printable_key>(glfw::key::A) == glfw::printable_key::A);
static_assert(static_cast<glfw::printable_key>(glfw::key::B) == glfw::printable_key::B);
static_assert(static_cast<glfw::printable_key>(glfw::key::C) == glfw::printable_key::C);
static_assert(static_cast<glfw::printable_key>(glfw::key::D) == glfw::printable_key::D);
static_assert(static_cast<glfw::printable_key>(glfw::key::E) == glfw::printable_key::E);
static_assert(static_cast<glfw::printable_key>(glfw::key::F) == glfw::printable_key::F);
static_assert(static_cast<glfw::printable_key>(glfw::key::G) == glfw::printable_key::G);
static_assert(static_cast<glfw::printable_key>(glfw::key::H) == glfw::printable_key::H);
static_assert(static_cast<glfw::printable_key>(glfw::key::I) == glfw::printable_key::I);
static_assert(static_cast<glfw::printable_key>(glfw::key::J) == glfw::printable_key::J);
static_assert(static_cast<glfw::printable_key>(glfw::key::K) == glfw::printable_key::K);
static_assert(static_cast<glfw::printable_key>(glfw::key::L) == glfw::printable_key::L);
static_assert(static_cast<glfw::printable_key>(glfw::key::M) == glfw::printable_key::M);
static_assert(static_cast<glfw::printable_key>(glfw::key::N) == glfw::printable_key::N);
static_assert(static_cast<glfw::printable_key>(glfw::key::O) == glfw::printable_key::O);
static_assert(static_cast<glfw::printable_key>(glfw::key::P) == glfw::printable_key::P);
static_assert(static_cast<glfw::printable_key>(glfw::key::Q) == glfw::printable_key::Q);
static_assert(static_cast<glfw::printable_key>(glfw::key::R) == glfw::printable_key::R);
static_assert(static_cast<glfw::printable_key>(glfw::key::S) == glfw::printable_key::S);
static_assert(static_cast<glfw::printable_key>(glfw::key::T) == glfw::printable_key::T);
static_assert(static_cast<glfw::printable_key>(glfw::key::U) == glfw::printable_key::U);
static_assert(static_cast<glfw::printable_key>(glfw::key::V) == glfw::printable_key::V);
static_assert(static_cast<glfw::printable_key>(glfw::key::W) == glfw::printable_key::W);
static_assert(static_cast<glfw::printable_key>(glfw::key::X) == glfw::printable_key::X);
static_assert(static_cast<glfw::printable_key>(glfw::key::Y) == glfw::printable_key::Y);
static_assert(static_cast<glfw::printable_key>(glfw::key::Z) == glfw::printable_key::Z);
static_assert(static_cast<glfw::printable_key>(glfw::key::Left_Bracket) == glfw::printable_key::Left_Bracket);
static_assert(static_cast<glfw::printable_key>(glfw::key::Backslash) == glfw::printable_key::Backslash);
static_assert(static_cast<glfw::printable_key>(glfw::key::Right_Bracket) == glfw::printable_key::Right_Bracket);
static_assert(static_cast<glfw::printable_key>(glfw::key::Grave_Accent) == glfw::printable_key::Grave_Accent);
static_assert(static_cast<glfw::printable_key>(glfw::key::World_1) == glfw::printable_key::World_1);
static_assert(static_cast<glfw::printable_key>(glfw::key::World_2) == glfw::printable_key::World_2);

static_assert(static_cast<glfw::function_key>(glfw::key::Escape) == glfw::function_key::Escape);
static_assert(static_cast<glfw::function_key>(glfw::key::Enter) == glfw::function_key::Enter);
static_assert(static_cast<glfw::function_key>(glfw::key::Tab) == glfw::function_key::Tab);
static_assert(static_cast<glfw::function_key>(glfw::key::Backspace) == glfw::function_key::Backspace);
static_assert(static_cast<glfw::function_key>(glfw::key::Insert) == glfw::function_key::Insert);
static_assert(static_cast<glfw::function_key>(glfw::key::Delete) == glfw::function_key::Delete);
static_assert(static_cast<glfw::function_key>(glfw::key::Right) == glfw::function_key::Right);
static_assert(static_cast<glfw::function_key>(glfw::key::Left) == glfw::function_key::Left);
static_assert(static_cast<glfw::function_key>(glfw::key::Down) == glfw::function_key::Down);
static_assert(static_cast<glfw::function_key>(glfw::key::Up) == glfw::function_key::Up);
static_assert(static_cast<glfw::function_key>(glfw::key::Page_Up) == glfw::function_key::Page_Up);
static_assert(static_cast<glfw::function_key>(glfw::key::Page_Down) == glfw::function_key::Page_Down);
static_assert(static_cast<glfw::function_key>(glfw::key::Home) == glfw::function_key::Home);
static_assert(static_cast<glfw::function_key>(glfw::key::End) == glfw::function_key::End);
static_assert(static_cast<glfw::function_key>(glfw::key::Caps_Lock) == glfw::function_key::Caps_Lock);
static_assert(static_cast<glfw::function_key>(glfw::key::Scroll_Lock) == glfw::function_key::Scroll_Lock);
static_assert(static_cast<glfw::function_key>(glfw::key::Num_Lock) == glfw::function_key::Num_Lock);
static_assert(static_cast<glfw::function_key>(glfw::key::Print_Screen) == glfw::function_key::Print_Screen);
static_assert(static_cast<glfw::function_key>(glfw::key::Pause) == glfw::function_key::Pause);
static_assert(static_cast<glfw::function_key>(glfw::key::F1) == glfw::function_key::F1);
static_assert(static_cast<glfw::function_key>(glfw::key::F2) == glfw::function_key::F2);
static_assert(static_cast<glfw::function_key>(glfw::key::F3) == glfw::function_key::F3);
static_assert(static_cast<glfw::function_key>(glfw::key::F4) == glfw::function_key::F4);
static_assert(static_cast<glfw::function_key>(glfw::key::F5) == glfw::function_key::F5);
static_assert(static_cast<glfw::function_key>(glfw::key::F6) == glfw::function_key::F6);
static_assert(static_cast<glfw::function_key>(glfw::key::F7) == glfw::function_key::F7);
static_assert(static_cast<glfw::function_key>(glfw::key::F8) == glfw::function_key::F8);
static_assert(static_cast<glfw::function_key>(glfw::key::F9) == glfw::function_key::F9);
static_assert(static_cast<glfw::function_key>(glfw::key::F10) == glfw::function_key::F10);
static_assert(static_cast<glfw::function_key>(glfw::key::F11) == glfw::function_key::F11);
static_assert(static_cast<glfw::function_key>(glfw::key::F12) == glfw::function_key::F12);
static_assert(static_cast<glfw::function_key>(glfw::key::Key_Pad_0) == glfw::function_key::Key_Pad_0);
static_assert(static_cast<glfw::function_key>(glfw::key::Key_Pad_1) == glfw::function_key::Key_Pad_1);
static_assert(static_cast<glfw::function_key>(glfw::key::Key_Pad_2) == glfw::function_key::Key_Pad_2);
static_assert(static_cast<glfw::function_key>(glfw::key::Key_Pad_3) == glfw::function_key::Key_Pad_3);
static_assert(static_cast<glfw::function_key>(glfw::key::Key_Pad_4) == glfw::function_key::Key_Pad_4);
static_assert(static_cast<glfw::function_key>(glfw::key::Key_Pad_5) == glfw::function_key::Key_Pad_5);
static_assert(static_cast<glfw::function_key>(glfw::key::Key_Pad_6) == glfw::function_key::Key_Pad_6);
static_assert(static_cast<glfw::function_key>(glfw::key::Key_Pad_7) == glfw::function_key::Key_Pad_7);
static_assert(static_cast<glfw::function_key>(glfw::key::Key_Pad_8) == glfw::function_key::Key_Pad_8);
static_assert(static_cast<glfw::function_key>(glfw::key::Key_Pad_9) == glfw::function_key::Key_Pad_9);
static_assert(static_cast<glfw::function_key>(glfw::key::Key_Pad_Decimal) == glfw::function_key::Key_Pad_Decimal);
static_assert(static_cast<glfw::function_key>(glfw::key::Key_Pad_Divide) == glfw::function_key::Key_Pad_Divide);
static_assert(static_cast<glfw::function_key>(glfw::key::Key_Pad_Multiply) == glfw::function_key::Key_Pad_Multiply);
static_assert(static_cast<glfw::function_key>(glfw::key::Key_Pad_Subtract) == glfw::function_key::Key_Pad_Subtract);
static_assert(static_cast<glfw::function_key>(glfw::key::Key_Pad_Add) == glfw::function_key::Key_Pad_Add);
static_assert(static_cast<glfw::function_key>(glfw::key::Key_Pad_Enter) == glfw::function_key::Key_Pad_Enter);
static_assert(static_cast<glfw::function_key>(glfw::key::Key_Pad_Equal) == glfw::function_key::Key_Pad_Equal);
static_assert(static_cast<glfw::function_key>(glfw::key::Left_Shift) == glfw::function_key::Left_Shift);
static_assert(static_cast<glfw::function_key>(glfw::key::Left_Control) == glfw::function_key::Left_Control);
static_assert(static_cast<glfw::function_key>(glfw::key::Left_Alt) == glfw::function_key::Left_Alt);
static_assert(static_cast<glfw::function_key>(glfw::key::Left_Super) == glfw::function_key::Left_Super);
static_assert(static_cast<glfw::function_key>(glfw::key::Right_Shift) == glfw::function_key::Right_Shift);
static_assert(static_cast<glfw::function_key>(glfw::key::Right_Control) == glfw::function_key::Right_Control);
static_assert(static_cast<glfw::function_key>(glfw::key::Right_Alt) == glfw::function_key::Right_Alt);
static_assert(static_cast<glfw::function_key>(glfw::key::Right_Super) == glfw::function_key::Right_Super);
static_assert(static_cast<glfw::function_key>(glfw::key::Menu) == glfw::function_key::Menu);
